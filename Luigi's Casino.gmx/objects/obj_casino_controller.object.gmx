<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_casino_controller</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Casino controller

//Window size
Window_S=4;

//If debug info should be shown
Debug_info=1;

//Discord stuff
ex=unix_timestamp();
status="default";
dis_icon="default"
details="";

//Play music
audio_stop_all();
audio_play_sound(snd_casino,1,1);




//Destroy any existsing card
with(obj_card){instance_destroy();}



//If you can have control on the game
Control=1;





//This variable is mostly to go through states and stuff
Page=0;

SubPage=0;

NextPage=0;



//A variable if you need to store specific card stuff
OG[0]=0;



//The amount of games
MaxGames=3;



//Amount of points in the leaderboards
MaxPoints=5;



//Game enums, just to make it easier to visualize
enum Gamestate {
     memory,
     picturepoker,
     pairagone
}



//Set game
Game=-1;




//The amount of cards to create based on game mode
maxCards[MaxGames]=0;

maxX[MaxGames]=0;
maxY[MaxGames]=0;

//The offssets for the cards
AnchorX[MaxGames]=0;
AnchorY[MaxGames]=0;

//Card ID
Card[maxCards[MaxGames]]=0;




bigstar=0;




//Specific values----

//Memory------------
//The amount of cards to create based on game mode
maxCards[Gamestate.memory]=8;

maxX[Gamestate.memory]=8;
maxY[Gamestate.memory]=4;

//The offssets for the cards
AnchorX[Gamestate.memory]=64;
AnchorY[Gamestate.memory]=64;

//Card ID
Card[maxCards[Gamestate.memory]]=0;



//Variable to interact with cards
D=0;
E=0;
F=0;

G=0;
G2=0;
G3=0;



//Scores
Score[MaxGames]=0;

//This is for the big star
Packed_score=0;

//Biggest amout of stars you can have on screen
Maxstar=5;



//Bet variables
BET_Coin[4]=0;
max_bet[3]=0;
max_bet[Gamestate.memory]=3;

//Position in the bet
Bet_pos=0;

//Set high scores
for(var a=0; a&lt;MaxGames; a++){
Highscore[a,MaxPoints]=0;
}



//If we're in multiplayer mode increase this number
Multiplayer=0;



//The player that is playing
Player=0;



//If we are in a game
InGame=0;



//State for the game (locked-unlocked), I might add a "mastered" option if you got a high enough score
//0- locked
//1- unlocked
GameState[MaxGames]=0;
GameState[0]=1;
GameState[1]=1;

//Coin amount
Coins=0;

//Winning state
Won=0;

//If this is true, on the losing screen you'll be kicked to thegame choose screen
Kicked=0;

global.GUIX=0;
global.GUIY=0;


//Luigi
L_wave=0;
L_OFFY=0;
L_sprite=spr_luigi_choose;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Give oontrol
Control=1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go to a game - 2
Game=NextPage;
Control=1;
L_sprite=spr_luigi_choose;
alarm[1]=60;

with(instance_create(room_width/2,room_height/2,obj_curtain_open)){
     sprite=spr_star_trans; Speed=14;
}

with(obj_curtain){instance_destroy();}
D=0;

//Execute stuff based on game, it'll be covered by the curtain
switch(Game){
       case Gamestate.memory:
                        
            //Set default stuff
            if(Coins==0){Coins=5;}
            L_sprite=spr_luigi_choose;
            F=1;
            Won=0;
            Kicked=0;
            Bet_pos=0;
            bigstar=0;
            with(obj_card){instance_destroy();}
            
             
            var CON=Coins;
            //Create the bet coins
            for(var a=0; a&lt;max_bet[Gamestate.memory]; a++){
            
              if(CON-(a+1)&gt;=0){
            
                with(instance_create(global.GUIX+13,global.GUIY+12,obj_coin)){
                     
                     //Put them on the top right corner
                     LuigiX=room_width-1-14*(a+1);
                     
                     //Send them into Luigi at the end
                     LuigiY=room_height+20;
                     
                     //Don't move immediately 
                     move=0;
                     alarm[1]=30+20*a;
                     
                     //We don't have to deal with turning time
                     wait=0;
                     
                     //Set ID in the array
                     other.BET_Coin[a]=id;
                     
                     //Stop before the turn
                     stop=1;
                     
                     add=-1;
                     alarm[3]=30+20*a;
                     
                }
                
              }else{Bet_pos++;}
            
            }
            
            
            
       break;
       
       default: 
            with(obj_card){instance_destroy();}
       break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Restart game
scr_save();

with(all){if(id!=other.id){instance_destroy();}}
D=0;

scr_restart();


with(instance_create(room_width/2,room_height/2,obj_curtain_open)){
     sprite=spr_star_trans; Speed=28;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Go to a game -1
if(!instance_exists(obj_curtain)){
with(instance_create(room_width/2,room_height/2,obj_curtain)){
                          sprite=spr_star_trans; Boost=0; Speed=14; other.D=id;
}  

alarm[5]=40;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Game check
switch(Game){

       case Gamestate.memory:
       
            
         
            if(OG[0].Image==OG[1].Image){//A match
            
               with(OG[0]){TargetSide=1;y+=4;
               TargetY=-80; alarm[0]=30; mask_index=-1; depth=-1;}
               with(OG[1]){TargetSide=1;y+=4;
               TargetY=-80; alarm[0]=30; mask_index=-1; depth=-1;}
               
               //Save at the end
               if(instance_number(obj_card)==2){

                  with(obj_coin){instance_destroy();}
                  G2=40;  
                  Won=1;           
                  F=1;
                  L_sprite=spr_luigi_clap;
                  Score[Gamestate.memory]++;
                  
               }
            
            }else{//Not a match
            
               Control=0;
               
               //Make the cards shake and retret
               with(OG[0]){shake=3; TargetSide=1;}
               with(OG[1]){shake=3;TargetSide=1;}
               OG[0]=-1; OG[1]=-1;
               
               
               /*
               If we have enough coins in the bet, we cut one,
               otherwise we go to the losing state and cut a star,
               if the stars are 0, we are forced to the game select screen
               */
               
               if(Bet_pos&lt;max_bet[Gamestate.memory]-1){
               
                  //Make the coin go away
                  with(BET_Coin[Bet_pos]){ stop=0; }
                  
                  //Make all the other coins slide
                  if(Bet_pos&gt;=0){
                  
                     for(var a=Bet_pos; a&lt;max_bet[Gamestate.memory]; a++){
                         
                         if(instance_exists(BET_Coin[a])){
                         
                            with(BET_Coin[a]){move=1; x-=3; LuigiX+=14; SpeedX=4;}
                         
                         }
                         
                     }
                  
                  }
                  Bet_pos++;
               
               }else{
               
                  if(instance_exists(BET_Coin[max_bet[Gamestate.memory]-1])){
                     with(BET_Coin[max_bet[Gamestate.memory]-1]){stop=0;}
                  }
               
                  if(Score[Gamestate.memory]&gt;0){//We have more than a star
                  
                     if(Score[Gamestate.memory]%Maxstar==0){Packed_score--;}
                  
                     Score[Gamestate.memory]--;
                  
                  }
                  
                  if(Coins&lt;=0){//No more coins, get forced to the game select
                  
                     Kicked=1;
                     with(obj_coin){ stop=0; }
                  
                  }
                  
                  F=1;
                  Won=-1;
               
               }
               
               Control=1;
               G2=40;
              
            }
       
       break;

}
Control=1;
Page=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set up game
randomize();
Won=0;
switch(Game){

       case Gamestate.memory://Memory game
       /*
       In this game we have a set of cards, they all have one duplicate of each other,
       once to of the same type are revealed, they go away and you must clear them all.
       If you get one of another typer after picking upo the first one, they retire back
       and you have to try again.
       */

            //Choose cards
            /*
            We use a ds list to control the cards' state better
            */

            //Set card amount if the score grew
            if(Score[Gamestate.memory]&gt;=5){
            
               maxCards[Gamestate.memory]=10; AnchorX[Gamestate.memory]=48
            
            }else{maxCards[Gamestate.memory]=8; AnchorX[Gamestate.memory]=64}     
            
       
            //Create list
            numbers = ds_list_create();
            for (var i=1;i&lt;=maxCards[Gamestate.memory];i++) { ds_list_add(numbers, i);  }

            var index;
            
            //Set up the card indexes
            for (i=0;i&lt;maxCards[Gamestate.memory];i++) {
                 index = irandom(ds_list_size (numbers)-1);
                 if(numbers[| index]&gt;maxCards[Gamestate.memory]/2){numbers[| index]-=maxCards[Gamestate.memory]/2;}
                 array1[0, i] = numbers[| index];
                 ds_list_delete(numbers, index);
           }

           //Create the cards
           for(a=0; a&lt;maxCards[Gamestate.memory]/(maxCards[Gamestate.memory]/2); a++){
           
               for(b=0; b&lt;maxCards[Gamestate.memory]/2; b++){
               
                   
                   with(instance_create(room_width/2,-64,obj_card)){
                   
                        /*
                        We position the cards based on the amount
                        half on the left and half on the right
                        
                        We start from the middle of the room
                        */
                        
                        //X position
                        X=
                        room_width/2
                        + (other.AnchorX[Gamestate.memory]*other.b )    //We place all the cards from the middle point
                        
                        OFFX=-other.AnchorX[Gamestate.memory]/2*((other.maxCards[Gamestate.memory]/2)-1)
                        
                        
                        
                        //Y position
                        TargetY=
                        room_height/2
                        + (other.AnchorY[Gamestate.memory]*other.a )
                        - (other.AnchorY[Gamestate.memory]*other.maxCards[Gamestate.memory]/(other.maxCards[Gamestate.memory]/2) )/4   //We place all the cards from the middle point
                        
                        //TargetY=other.AnchorY[Gamestate.memory]*(other.a+1);
                        
                        //Set the card index
                        Image=other.array1[0,other.b+(other.a*(other.maxCards[Gamestate.memory]/2))];      
                        
                        //Store card ID                  
                        other.Card[other.b+(other.a*(other.maxCards[Gamestate.memory]/2))]=id;
                   }
                   
               }
           }


    break;


}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Resize GUI layer
//display_set_gui_size(256,192);
display_set_gui_size(room_width,room_height);

window_center();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Casino time
if(window_get_fullscreen()){
display_set_gui_maximise(5,5);
}else{
display_set_gui_maximise(Window_S,Window_S);
}



//Rich presence setup
np_initdiscord(
"860164044680855572",
0,
0);

//Time
np_setpresence_timestamps(
ex
,0,1);

np_setpresence(
status,
details,
dis_icon,
0);

np_update();




//Set GUI positions
global.GUIX=background_x[3];
global.GUIY=background_y[3];

//Start game logic
switch(Game){

       case Gamestate.memory://Memory
       
            scr_memory_logic();
            
            if(Multiplayer){var SO=" (multiplayer)";}else{ var SO=" (singleplayer)"; }
            status="In Memory Match"+SO;
            details="💰:"+string(Coins)+"|⭐:"+string(Score[Gamestate.memory]);
            dis_icon="memory";
       
       break;
               
       
       
       
       case Gamestate.picturepoker://Picture poker
                 
            scr_picturepoker_logic();
            
            if(Multiplayer){var SO=" (multiplayer)";}else{ var SO=" (singleplayer)"; }
            status="In Picture Poker"+SO;
            details="💰:"+string(Coins)+"|⭐:"+string(Score[Gamestate.picturepoker]);
            dis_icon="memory";
       
       
       break;
       
       
       
       
       case -1://Choosing a game
       
          details="";
          status="Choosing a game";
          dis_icon="default";
       
       break;

}

//Debug restart
if(keyboard_check_pressed(ord("R")))&amp;&amp;(keyboard_check(vk_alt)){
  with(instance_create(room_width/2,room_height/2,obj_curtain)){
       sprite=spr_star_trans; Boost=0; Speed=28; other.D=id;
  }  
  
  alarm[4]=60;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize game
alarm[1]=1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Save
scr_save();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set up window
window_set_size(room_width*Window_S,room_height*Window_S);
surface_resize(application_surface,room_width*Window_S,room_height*Window_S);
application_surface_draw_enable(false);
alarm[0]=2;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load
if(file_exists("Highscores.dat")){


   var file=file_text_open_read("Highscores.dat");
   
   for(var B=0; B&lt;MaxGames-1; B++){
   
   for(var a=0; a&lt;MaxPoints; a++){
   
   Highscore[B,a]=real(file_text_read_string(file));
   file_text_readln(file);
   
   }
   
   }
   
   file_text_close(file);

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw surface
draw_surface_stretched(
application_surface,0,0,window_get_width(),window_get_height() );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Casino HUD      
draw_set_font(font_2);
draw_set_colour(c_white);
draw_set_halign(fa_right);
draw_set_valign(fa_top);

//We draw some general info such as FPS and background credits
draw_text_transformed(room_width,
0,"Background by CMGee#on DeviantArt#"
+"FPS:"+string(fps)+
" REAL FPS:"+string(fps_real)
,0.05,0.05,0);

draw_set_halign(fa_left);

//Start game draw logic
/*
In here you say what you want the game to draw on the GUI 
layer based on the game, don't make too many calculations over here
unless necessary
*/
switch(Game){

       case Gamestate.memory://Memory
       
            scr_memory_draw();
       
       break;

       
       case Gamestate.picturepoker://Picture poker
      
            scr_picturepoker_draw();
      
       break;
       
       
       case -1: //Game select
       
         if(SubPage==0){
         
         
           ///Draw the buttons
           for(var a=0; a&lt;3; a++){
               
               var OFFS=60;
               var SCAL=0.75
               var OFFSY=55;
               
               //Draw a white cover if the game is selected
               if(Page==a){
               
                   shader_set(shd_white_sprite);
                   
                   draw_sprite_ext(spr_game_icon_base,0,
                   room_width/2 +OFFS*a -(OFFS*2)/2,
                   room_height/2+OFFSY
                   ,SCAL+0.1,SCAL+0.1,0,c_white,1);
                   
                   shader_reset();
               
               }
           
               //Draw the icon base
               draw_sprite_ext(spr_game_icon_base,0,
               room_width/2 +OFFS*a -(OFFS*2)/2,
               room_height/2+OFFSY
               ,SCAL,SCAL,0,c_white,1);
               
               
               
               //If it's locked we make the sprite grayscale
               if(!GameState[a]){shader_set(shd_grayscale_texture);}
               
               //Draw the icon
               draw_sprite_ext(spr_game_icon,a,
               room_width/2 +OFFS*a -(OFFS*2)/2,
               room_height/2+OFFSY
               ,SCAL,SCAL,0,c_white,1);
               
               shader_reset();
               
               
               
               //Select
               if(point_in_rectangle(mouse_x,mouse_y,
               (room_width/2 +OFFS*a -(OFFS*2)/2) - 52*SCAL/2,
               room_height/2 - 52*SCAL/2 +OFFSY,
               (room_width/2 +OFFS*a -(OFFS*2)/2) + 52*SCAL/2,
               room_height/2 + 52*SCAL/2 +OFFSY)){
               
                  
                         if(Control){Page=a;}
                  
                         if(mouse_check_button_pressed(mb_left))&amp;&amp;(Control)
                         &amp;&amp;(GameState[Page]==1){
                                          
                            //Start the transition                                          
                            NextPage=Page; 
                            
                            //Set up game specific stuff (if you don't want it to get repeated at every transition)
                            switch(Page){
                               
                                   case 0: Coins = 12; Score[Gamestate.memory]=0; Packed_score=0; break;
                            
                            }
                            
                            //Make Luigi bounce a bit
                            L_sprite=spr_luigi_oke;  
                            L_OFFY=-4;   
                            L_wave=0;           
                            
                            //Wait for transition start   
                            alarm[3]=30;               
                            
                            //Don't let the player control the menu      
                            Control=0;                     
                     
                        }      

                  
               }
               
                  //Set up name, intructions, and records
                  switch(Page){
                   
                         //Memory match
                         case 0:
                             var TITLE_STRING="-Memory Match-";
                             var INSTR_STRING="-Instructions-#"+
                             "Pick two matching cards to make them disappear.#Clear all the cards to win."+
                             "##-High scores-"+
                             "#A - "+string(Highscore[Gamestate.memory,0])
                             +"#B - "+string(Highscore[Gamestate.memory,1])
                             +"#C - "+string(Highscore[Gamestate.memory,2])
                             +"#D - "+string(Highscore[Gamestate.memory,3])
                             +"#E - "+string(Highscore[Gamestate.memory,4]);
                         
                             
                         break;
                         
                         //Picture Poker
                         case 1:
                             var TITLE_STRING="-Picture Poker-";
                             var INSTR_STRING="-Instructions-#"+
                             "Get a better hand than Luigi to win!#If you're confident your hand is best,#increase the number of coins you bet!"+
                             "#-High scores-"+
                             "#A - "+string(Highscore[Gamestate.picturepoker,0])
                             +"#B - "+string(Highscore[Gamestate.picturepoker,1])
                             +"#C - "+string(Highscore[Gamestate.picturepoker,2])
                             +"#D - "+string(Highscore[Gamestate.picturepoker,3])
                             +"#E - "+string(Highscore[Gamestate.picturepoker,4]);
                         
                             
                         break;
                         
                         //Pair-a-Go
                         case 2:
                             var TITLE_STRING="-Pair-a-Go-";
                             var INSTR_STRING="-Instructions-#"+
                             "Touch 2 identical cards that are connected#horizontally, vertically, or diagonally#to make them disappear. Clear them all to win!"+
                             "#-High scores-"+
                             "#A - "+string(Highscore[Gamestate.pairagone,0])
                             +"#B - "+string(Highscore[Gamestate.pairagone,1])
                             +"#C - "+string(Highscore[Gamestate.pairagone,2])
                             +"#D - "+string(Highscore[Gamestate.pairagone,3])
                             +"#E - "+string(Highscore[Gamestate.pairagone,4]);
                         
                             
                         break;
                         
                         //Nothing set
                         default:
                            var TITLE_STRING="-No Name Set-";
                            var INSTR_STRING="Add some intructions#here dummy.";
                         break;
                  
                  }
                  
                  
                  draw_set_colour(make_colour_rgb(248,248,160));
                             
                  //Set rectangle length
                  if(string_width(INSTR_STRING)*0.1&gt;string_width(TITLE_STRING)*0.2){
                     var LENGTH=string_width(INSTR_STRING)*0.05;
                  }else{
                     var LENGTH=string_width(TITLE_STRING)*0.1;
                  }
                  
                  //Draw a base rectangle
                  draw_rectangle(
                  room_width/2 - LENGTH -2 ,
                  13,
                  room_width/2 + LENGTH +2,
                  12+string_height(TITLE_STRING)*0.2+string_height(INSTR_STRING)*0.1+2
                  ,0);
                                               
                  //Draw the text
                  draw_set_halign(fa_center);
                  draw_set_valign(fa_top);
                  draw_set_colour(c_black);
                  
                  //Draw the title and instructions
                  draw_text_transformed(room_width/2,12,
                  TITLE_STRING
                  ,.2,.2,0);
                  
                  draw_text_transformed(room_width/2,32,
                  INSTR_STRING
                  ,.1,.1,0);
                  
                  draw_set_colour(c_white);
                             
           }
           
         }
         
         //Draw Luigi
         if(Control){L_wave=(sin(G*0.1));}
         G++;
         L_OFFY=scr_approach(L_OFFY,0,1);
         draw_sprite_ext(L_sprite,0,room_width+32,room_height+L_wave*1+4+L_OFFY,0.25,0.25,0,c_white,1);
       
       break;
      
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw casino logic

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
