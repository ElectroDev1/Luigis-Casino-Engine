<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surf=-1;
rot=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rot+=0.1;

if(!surface_exists(surf)){

   surf=surface_create(256,256);

}
else{
   surface_set_target(surf);
   draw_clear(c_green);
   
   
   repeat(10){
     draw_sprite(spr_mario_idle,0,irandom(256),irandom(256));
   }
   
   surface_reset_target();
   
   d3d_transform_set_rotation_z(rot)
   d3d_transform_add_translation(x,y,0);
   draw_surface(surf,-128,-128);
   d3d_transform_set_identity();
   draw_surface(surf,-128,-128);
}

draw_line(200,60,600,60);
draw_line(200,60,200,460);

draw_line(200,60,600,460);

var MAX=3

for(var a=0; a&lt;MAX; a++){
  
draw_circle(
(200)+
(400/(MAX+1)*a)+
(400)/(MAX+1)
,60,4,0);

draw_circle(
200,
(60)+
(400/(MAX+1)*a)+
(400)/(MAX+1)
,4,0);


draw_circle(
(200)+
(400/(MAX+1)*a)+
(400)/(MAX+1),

(60)+
(400/(MAX+1)*a)+
(400)/(MAX+1)
,4,0);





draw_text(200+40*a,45,
(200)+
(400/(4+1)*a)+
(400)/(4+1)
);

}

//Calculating points in a set distance with the same distance between each other
/*Formula
(start point)  +  ( distance/ (points+1) *current point )  +  ( distance / (points+1)
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
