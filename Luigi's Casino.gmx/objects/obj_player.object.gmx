<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mario_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player
vsp=0;
max_vsp=8;
grav=0.7;
stopV=0;
jumpforce=-10;

onfloor=0;

sensor_down=0;

Angle=0;

//Sensors
/*
The first value is for horizontal/vertival axis
The second one for left/right, up/down sensors
*/
sensor_X[1,1]=0;
sensor_Y[1,1]=0;


//Distance from ceonter to extreme
/*
The value sets which halved distance to use as reference (width and height)
*/
XX[1]=0;
YY[1]=0;

Angle=180;

bottomleft=-4;
bottomright=-4;
bottom=-4;

topleft=-4;
top=-4;
left=-4;
right=-4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

//Vertical speed
vsp+=grav*!stopV;

if(vsp&gt;=max_vsp){vsp=max_vsp;}


y+=vsp;


x=min(x,room_width);
y=min(y,room_height);
x=max(x,0);
y=max(y,0);

if(keyboard_check_pressed(vk_space)){
   vsp=jumpforce;
}

if(keyboard_check(vk_right)){
   x+=2;
}

if(keyboard_check(vk_left)){
   x-=2;
}

if(keyboard_check(vk_up)){Angle+=1; if(Angle&gt;=360){Angle=0;} }
if(keyboard_check(vk_down)){Angle-=1; if(Angle&lt;=-360){Angle=0;} }



XX[0]=-lengthdir_x(sprite_width/2,Angle+90);
YY[0]=-lengthdir_y(sprite_width/2,Angle+90);

XX[1]=-lengthdir_x(sprite_height/2,Angle+90);
YY[1]=-lengthdir_y(sprite_height/2,Angle+90);

//Horizontal sensors
sensor_X[0,0]=x+lengthdir_x(sprite_width/2,Angle)
sensor_X[0,1]=x-lengthdir_x(sprite_width/2,Angle)

sensor_Y[0,0]=y+lengthdir_y(sprite_width/2,Angle)
sensor_Y[0,1]=y-lengthdir_y(sprite_width/2,Angle)

//Vertical sensors
sensor_X[1,0]=x+lengthdir_y(sprite_height/2,Angle)
sensor_X[1,1]=x-lengthdir_y(sprite_height/2,Angle)

sensor_Y[1,0]=y+lengthdir_y(sprite_height/2,Angle)
sensor_Y[1,1]=y-lengthdir_y(sprite_height/2,Angle)




//Bottom
bottomleft=
collision_circle(
sensor_X[0,1]+XX[1],
sensor_Y[0,1]+YY[1],2,
obj_collision_parent,1,0)

bottomright=
collision_circle(
sensor_X[0,0]+XX[1],
sensor_Y[0,0]+YY[1],2,
obj_collision_parent,1,0)

if(!bottomright)&amp;&amp;(!bottomleft){
bottom=
collision_rectangle(
sensor_X[0,0]+XX[1],
sensor_Y[0,0]+(YY[1]-6),
sensor_X[0,1]+XX[1],
sensor_Y[0,1]+(YY[1]+2),obj_collision_parent,1,0);
}else{bottom=-4;}


topleft=
collision_circle(
sensor_X[0,1]-XX[1],
sensor_Y[0,1]-YY[1],2,
obj_collision_parent,1,0);

topright=
collision_circle(
sensor_X[0,0]-XX[1],
sensor_Y[0,0]-YY[1],2,
obj_collision_parent,1,0);

top=
collision_rectangle(
sensor_X[0,0]-XX[1],
sensor_Y[0,0]-(YY[1]-vsp),
sensor_X[0,1]-XX[1],
sensor_Y[0,1]-(YY[1]+2),obj_collision_parent,1,0);

right=
collision_rectangle(
sensor_X[0,0]-(XX[1]+2),
sensor_Y[0,0]-YY[1],
sensor_X[0,0]+(XX[1]-2),
sensor_Y[0,0]+YY[1],obj_solid,1,0);

left=collision_rectangle(
sensor_X[0,1]+(XX[1]-2),
sensor_Y[0,1]+YY[1],
sensor_X[0,1]-(XX[1]+2),
sensor_Y[0,1]-YY[1],obj_solid,1,0);

stopV=0;



//COLLISIONS------------------


if(bottomleft){

   if(vsp&gt;=0){
    if(sensor_Y[0,1]-YY[1]&lt;bottomleft.bbox_top+8){
      
      vsp=0;
      stopV=1;
      //y=bottomleft.bbox_top-(sensor_Y[0,0]-y)-YY[1]
      y=bottomleft.bbox_top-(sensor_Y[0,1]-y)-YY[1]
      
      
    }
   }
}
if(bottomright){

   if(vsp&gt;=0){
    if(sensor_Y[0,0]-YY[1]&lt;bottomright.bbox_top+8){
      
      vsp=0;
      stopV=1;
      //y=bottomleft.bbox_top-(sensor_Y[0,0]-y)-YY[1]
      y=bottomright.bbox_top-(sensor_Y[0,0]-y)-YY[1]
               
    }
   }
   bottomleft=-4;
}




if(bottom){
  

   if(abs(Angle)==180)&amp;&amp;(bottom.object_index==obj_solid){
   
      if(vsp&lt;=0){
         vsp=0;
         y++;
      }
   
   }else{ if(Angle==0)

   if(vsp&gt;=0){
      if(bbox_bottom&lt;bottom.bbox_top+8)
      {
        
          vsp=0;
        stopV=1;
         y=bottom.bbox_top-YY[1]
         //y=bottom.bbox_top-(sensor_Y[0,1]-y)-YY[1];
        
      
      }
   }
   
   
   }
   bottomleft=-4;
   bottomright=-4;

}



if(topleft){

   if(vsp&lt;=0){
      if(topleft.object_index==obj_solid){ vap=0; y++;}
   }
   
   if(vsp&gt;=0){
      if(sensor_Y[0,1]-YY[1]&lt;topleft.bbox_top+8){
         vsp=0; stopV=1;
         y=topleft.bbox_top-(sensor_Y[0,1]-y)+YY[1];
      }
   }

  
}


if(topright){

   if(vsp&lt;=0){
      if(topright.object_index==obj_solid){ vap=0; y++;}
   }
   
   if(vsp&gt;=0){
      if(sensor_Y[0,0]-YY[1]&lt;topright.bbox_top+8){
         vsp=0; stopV=1;
         y=topright.bbox_top-(sensor_Y[0,0]-y)+YY[1];
      }
   }

  topleft=-4;
}



if(top){
  
   if(abs(Angle)==180){
      if(vsp&gt;=0){
         vsp=0;
         stopV=1;
         y=top.bbox_top+YY[1]
      }
   }
   else if(top.object_index==obj_solid){
      if(vsp&lt;0){
         vsp=0;
         y++;
      }
   }
 
}
//room_speed=20;
//Angle=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_right);

draw_text_transformed(display_get_gui_width()-10,10,
"PLAYER#"+
string(x)+":X#"+
string(y)+":Y#"+
string(Angle)+":Angle#"+
string(vsp)+":Vsp#"+
string(max_vsp)+":Vsp MAX#"
,2,2,0);

draw_set_halign(fa_left);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index,0,x,y,1,1,Angle,c_white,1);




draw_text(x+50,y-50,"COS:"+string(cos(Angle))+"#SIN:"+string(sin(Angle)));




//References

//Down
draw_line_width_colour(sensor_X[0,0]+XX[1],
sensor_Y[0,0]+YY[1],
sensor_X[0,1]+XX[1],
sensor_Y[0,1]+YY[1],2,c_red,c_red);

//Up
draw_line_width_colour(sensor_X[0,0]-XX[1],
sensor_Y[0,0]-YY[1],
sensor_X[0,1]-XX[1],
sensor_Y[0,1]-YY[1],2,c_red,c_red);

//Right
draw_line_width_colour(
sensor_X[0,0]-XX[1],
sensor_Y[0,0]-YY[1],
sensor_X[0,0]+XX[1],
sensor_Y[0,0]+YY[1],2,c_red,c_red);

//left
draw_line_width_colour(
sensor_X[0,1]+XX[1],
sensor_Y[0,1]+YY[1],
sensor_X[0,1]-XX[1],
sensor_Y[0,1]-YY[1],2,c_red,c_red);

draw_text(x-100,y-60,right);

draw_circle(
sensor_X[0,1]+XX[1],
sensor_Y[0,1]+YY[1],1,0);

draw_circle(
sensor_X[0,0]+XX[1],
sensor_Y[0,0]+YY[1],1,0);

draw_circle_colour(
sensor_X[0,1]-XX[1],
sensor_Y[0,1]-YY[1],1,c_green,c_green,0);

draw_circle(
sensor_X[0,0]-XX[1],
sensor_Y[0,0]-YY[1],1,0);


draw_line_colour(
x-lengthdir_x(sprite_width/2,Angle),
y-lengthdir_y(sprite_height/2,Angle),
x,
y-lengthdir_y(sprite_height/2,Angle),
c_green,c_green);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
